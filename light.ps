////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2DArray shaderTextures;
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 modelColor;
    float4 diffuseColor;
    float3 lightDirection;
	int    renderType;
};


//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	//0 for texture, 1 for gray, 2 for colored, 3 for depth, 4 for modelcolor, 5 for color from normal
 
	float4 textureColor;
	float4 color;

	if (renderType==3) {
	
		color = input.position;
	
	}else{
	
		if (renderType==4)
		{
			color = modelColor;
		};

		if (renderType==5)
		{
			color[0] = input.normal[0];
			color[1] = input.normal[1];
			color[2] = input.normal[2];
			color[3] = 1.0f;
		};

		if ((renderType==0)||(renderType==2))
		{
			float2 tex = input.tex;

			// Sample the pixel color from the texture using the sampler at this texture coordinate location.
			int texid = (int)floor(tex.x);
			
			if (texid<0) {
				texid = 0;
			};
			
			tex.x = tex.x - (float)texid;

			textureColor = shaderTextures.Sample(SampleType, float3(tex.x, tex.y, texid));
			color = textureColor;
		};
		
		
		if ((renderType==1)||(renderType==2))
		{
			if (renderType==1)
			{
				textureColor = modelColor;
			};
			
			float3 lightDir;
			float lightIntensity;
			
			// Invert the light direction for calculations.
			lightDir = -lightDirection;

			// Calculate the amount of light on this pixel.
			lightIntensity = saturate(dot(input.normal, lightDir));

			// Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
			color = saturate(diffuseColor * lightIntensity);

			// Multiply the texture pixel and the final diffuse color to get the final pixel color result.
			color = color * textureColor;
		};
	
	};






    return color;
}
